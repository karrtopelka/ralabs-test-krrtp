{"version":3,"sources":["features/datebuilder.js","features/cookies.js","components/Bar/Bar.js","config.js","components/SearchBar/SearchBar.js","features/iconSwitcher.js","components/SmallColumn/SmallColumn.js","components/AdditionalRow/AdditionalRow.js","components/InfoItem/InfoItem.js","components/CityName/CityName.js","components/DateDisplay/DateDisplay.js","components/MinMax/MinMax.js","components/WeatherType/WeatherType.js","components/Info/Info.js","components/WeatherInfo/WeatherInfo.js","components/Content/Content.js","components/PageLayout/PageLayout.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","d","day","getDay","String","slice","getCookie","c_name","i","x","y","ARRcookies","document","cookie","split","length","substr","indexOf","replace","checkCookie","w","setCookie","value","exdate","Date","setDate","getMinutes","JSON","stringify","Bar","left","right","justify","style","padding","textAlign","API","key","base","SearchBar","setWeather","isXS","useMediaQuery","match","useState","query","setQuery","shadow","Container","gap","h3","margin","text","trigger","type","placement","placeholder","onChange","e","target","onKeyPress","evt","parse","fetch","then","res","json","r","require","Sun","Cloud","CloudSnow","CloudRain","AlignCenter","iconSwitcher","size","SmallColumn","text1","text2","p","h6","color","AdditionalRow","isSM","weather","span","alignItems","sm","xs","wind","speed","main","feels_like","pressure","humidity","InfoItem","children","props","width","CityName","text-align","name","sys","country","DateDisplay","datebuilder","MinMax","Math","round","temp_min","temp_max","WeatherType","h5","Info","paddingBottom","paddingTop","h1","temp","WeatherInfo","Content","useToasts","setToast","useEffect","delay","actions","handler","event","cancel","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","errorObj","message","enableHighAccuracy","maximumAge","PageLayout","switchThemes","themeType","Header","h4","ghost","iconRight","auto","onClick","Footer","getFullYear","App","setThemeType","last","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c92efb5b.chunk.js","sourcesContent":["module.exports = function (d) {\r\n  let days = [\r\n    'Sunday',\r\n    'Monday',\r\n    'Tuesday',\r\n    'Wednesday',\r\n    'Thursday',\r\n    'Friday',\r\n    'Saturday',\r\n  ];\r\n\r\n  let day = days[d.getDay()];\r\n  return `${day},  ${String(d).slice(3, 15)}`;\r\n};\r\n","const setCookie = (c_name = 'local_weather', value) => {\r\n  let exdate = new Date();\r\n  exdate.setDate(exdate.getMinutes() + 10);\r\n  document.cookie = `${c_name} = ${JSON.stringify(value)}`;\r\n};\r\n\r\nconst getCookie = (c_name) => {\r\n  let i,\r\n    x,\r\n    y,\r\n    ARRcookies = document.cookie.split(';');\r\n  for (i = 0; i < ARRcookies.length; i++) {\r\n    x = ARRcookies[i].substr(0, ARRcookies[i].indexOf('='));\r\n    y = ARRcookies[i].substr(ARRcookies[i].indexOf('=') + 1);\r\n    x = x.replace(/^\\s+|\\s+$/g, '');\r\n    if (x === c_name) {\r\n      return y;\r\n    }\r\n  }\r\n};\r\n\r\nconst checkCookie = (c_name = 'local_weather') => {\r\n  let w = getCookie(c_name);\r\n  if (w) {\r\n    return w;\r\n  } else {\r\n    return 0;\r\n  }\r\n};\r\n\r\nmodule.exports = { checkCookie, setCookie };\r\n","import { Col, Row } from '@geist-ui/react';\r\nimport React from 'react';\r\n\r\nconst Bar = ({ left, right, ...props }) => {\r\n  return (\r\n    <Row justify=\"space-between\" style={{ padding: 10 }}>\r\n      <Col>{left}</Col>\r\n      <Col style={{ textAlign: 'right' }}>{right}</Col>\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default Bar;\r\n","const API = {\r\n  key: '0aede5452ca05333aeb7943df685ad17',\r\n  base: 'https://api.openweathermap.org/data/2.5/',\r\n};\r\n\r\nexport default API;\r\n","import {\r\n  Card,\r\n  Grid,\r\n  Input,\r\n  Keyboard,\r\n  Text,\r\n  Tooltip,\r\n  useMediaQuery,\r\n} from '@geist-ui/react';\r\nimport React, { useState } from 'react';\r\nimport API from '../../config';\r\nimport { checkCookie, setCookie } from '../../features/cookies';\r\n\r\nconst SearchBar = ({ setWeather }) => {\r\n  const isXS = useMediaQuery('xs', { match: 'down' });\r\n  const [query, setQuery] = useState('');\r\n  const search = (evt) => {\r\n    if (evt.key === 'Enter') {\r\n      const cookie = checkCookie(query);\r\n      if (cookie) {\r\n        setQuery('');\r\n        setWeather(JSON.parse(cookie));\r\n      } else {\r\n        fetch(`${API.base}weather?q=${query}&units=metric&appid=${API.key}`)\r\n          .then((res) => res.json())\r\n          .then((r) => {\r\n            setQuery('');\r\n            setWeather(r);\r\n            setCookie(query, r);\r\n          });\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Card shadow>\r\n      <Grid.Container gap={1} justify=\"space-around\">\r\n        <Grid>\r\n          <Text h3 style={{ margin: 0 }}>\r\n            Search location\r\n          </Text>\r\n        </Grid>\r\n        <Grid>\r\n          <Tooltip\r\n            text={\r\n              <>\r\n                Then hit {` `}\r\n                <Keyboard>Enter</Keyboard>\r\n              </>\r\n            }\r\n            trigger=\"click\"\r\n            type=\"dark\"\r\n            placement={isXS ? 'bottom' : 'top'}\r\n          >\r\n            <Input\r\n              type=\"text\"\r\n              placeholder=\"Search...\"\r\n              onChange={(e) => setQuery(e.target.value)}\r\n              value={query}\r\n              onKeyPress={search}\r\n            />\r\n          </Tooltip>\r\n        </Grid>\r\n      </Grid.Container>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default SearchBar;\r\n","const {\r\n  Sun,\r\n  Cloud,\r\n  CloudSnow,\r\n  CloudRain,\r\n  AlignCenter,\r\n} = require('@geist-ui/react-icons');\r\nexport default function iconSwitcher(w) {\r\n  switch (w) {\r\n    case 'Snow':\r\n      return <CloudSnow size={48} />;\r\n    case 'Clouds':\r\n      return <Cloud size={48} />;\r\n    case 'Sunny':\r\n      return <Sun size={48} />;\r\n    case 'Rain':\r\n      return <CloudRain size={48} />;\r\n    case 'Clear':\r\n      return <Sun size={48} />;\r\n    case 'Mist':\r\n      return <AlignCenter size={48} />;\r\n    default:\r\n      return <Sun size={48} />;\r\n  }\r\n}\r\n","import { Col, Text } from '@geist-ui/react';\r\nimport React from 'react';\r\n\r\nconst SmallColumn = ({ text1, text2, p, r }) => {\r\n  return (\r\n    <Col style={r ? { textAlign: 'right' } : { textAlign: 'left' }}>\r\n      <Text h6={!p} p={p} style={{ margin: 0, color: '#ccc' }}>\r\n        {text1}\r\n      </Text>\r\n      <Text h6={!p} p={p} style={{ margin: 0, color: '#ccc' }}>\r\n        {text2}\r\n      </Text>\r\n    </Col>\r\n  );\r\n};\r\n\r\nexport default SmallColumn;\r\n","import { Col, Grid, useMediaQuery } from '@geist-ui/react';\r\nimport React from 'react';\r\nimport SmallColumn from '../SmallColumn/SmallColumn';\r\n\r\nconst AdditionalRow = ({ isSM, weather }) => {\r\n  const isXS = useMediaQuery('xs', { match: 'down' });\r\n\r\n  return (\r\n    <>\r\n      {!isSM && <Col span={4} />}\r\n      <Grid.Container gap={2} justify=\"space-between\" alignItems=\"center\">\r\n        <Grid sm xs={12}>\r\n          <SmallColumn\r\n            text1={'wind speed'}\r\n            text2={`${weather.wind.speed} m/s`}\r\n            p\r\n            r={isXS}\r\n          />\r\n        </Grid>\r\n        <Grid sm xs={12}>\r\n          <SmallColumn\r\n            text1={'feels like'}\r\n            text2={`${weather.main.feels_like}°C`}\r\n            p\r\n          />\r\n        </Grid>\r\n        <Grid sm xs={12}>\r\n          <SmallColumn\r\n            text1={'pressure'}\r\n            text2={`${weather.main.pressure} inHg`}\r\n            p\r\n            r={isXS}\r\n          />\r\n        </Grid>\r\n        <Grid sm xs={12}>\r\n          <SmallColumn\r\n            text1={'humidity'}\r\n            text2={`${weather.main.humidity}%`}\r\n            p\r\n          />\r\n        </Grid>\r\n      </Grid.Container>\r\n      {!isSM && <Col span={4} />}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AdditionalRow;\r\n","import React from 'react';\r\n\r\nconst InfoItem = ({ children, ...props }) => {\r\n  return (\r\n    <div style={{ textAlign: 'center', width: '100%', ...props }}>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InfoItem;\r\n","import { Text } from '@geist-ui/react';\r\nimport React from 'react';\r\nimport InfoItem from '../InfoItem/InfoItem';\r\n\r\nconst CityName = ({ weather }) => {\r\n  return (\r\n    <InfoItem>\r\n      <Text h3 text-align=\"center\" style={{ margin: 0 }}>\r\n        {weather.name}, {weather.sys.country}\r\n      </Text>\r\n    </InfoItem>\r\n  );\r\n};\r\n\r\nexport default CityName;\r\n","import { Text } from '@geist-ui/react';\r\nimport React from 'react';\r\nimport datebuilder from '../../features/datebuilder';\r\nimport InfoItem from '../InfoItem/InfoItem';\r\n\r\nconst DateDisplay = () => {\r\n  return (\r\n    <InfoItem>\r\n      <Text\r\n        p\r\n        size={12}\r\n        text-align=\"center\"\r\n        style={{ margin: 0, color: '#ccc' }}\r\n      >\r\n        {datebuilder(new Date())}\r\n      </Text>\r\n    </InfoItem>\r\n  );\r\n};\r\n\r\nexport default DateDisplay;\r\n","import { Col, Grid } from '@geist-ui/react';\r\nimport React from 'react';\r\nimport SmallColumn from '../SmallColumn/SmallColumn';\r\n\r\nconst MinMax = ({ isSM, weather }) => {\r\n  return (\r\n    <>\r\n      {!isSM && <Col span={36} />}\r\n      <Grid.Container gap={2} justify=\"space-between\" alignItems=\"center\">\r\n        <Grid sm xs={12}>\r\n          <SmallColumn\r\n            text1=\"Min\"\r\n            text2={`${Math.round(weather.main.temp_min)}°C`}\r\n            r\r\n          />\r\n        </Grid>\r\n\r\n        <Grid sm xs={12}>\r\n          <SmallColumn\r\n            text1=\"Max\"\r\n            text2={`${Math.round(weather.main.temp_max)}°C`}\r\n          />\r\n        </Grid>\r\n      </Grid.Container>\r\n      {!isSM && <Col span={36} />}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MinMax;\r\n","import { Text } from '@geist-ui/react';\r\nimport React from 'react';\r\nimport InfoItem from '../InfoItem/InfoItem';\r\n\r\nconst WeatherType = ({ weather }) => {\r\n  return (\r\n    <InfoItem>\r\n      <Text h5 text-align=\"center\" style={{ margin: 0, color: '#ccc' }}>\r\n        {weather.weather[0].main}\r\n      </Text>\r\n    </InfoItem>\r\n  );\r\n};\r\n\r\nexport default WeatherType;\r\n","import { Grid, Text, useMediaQuery } from '@geist-ui/react';\r\nimport React from 'react';\r\nimport iconSwitcher from '../../features/iconSwitcher';\r\nimport AdditionalRow from '../AdditionalRow/AdditionalRow';\r\nimport CityName from '../CityName/CityName';\r\nimport DateDisplay from '../DateDisplay/DateDisplay';\r\nimport InfoItem from '../InfoItem/InfoItem';\r\nimport MinMax from '../MinMax/MinMax';\r\nimport WeatherType from '../WeatherType/WeatherType';\r\n\r\nconst Info = ({ weather }) => {\r\n  const isSM = useMediaQuery('xs', { match: 'down' });\r\n  return (\r\n    <Grid.Container gap={2} justify=\"center\">\r\n      <Grid xs={24} style={{ paddingBottom: 0 }}>\r\n        <DateDisplay />\r\n      </Grid>\r\n      <Grid xs={24} style={{ paddingBottom: 0 }}>\r\n        <CityName weather={weather} />\r\n      </Grid>\r\n      <Grid xs={24} style={{ paddingTop: 0 }}>\r\n        <WeatherType weather={weather} />\r\n      </Grid>\r\n      <Grid xs={24}>\r\n        <InfoItem>{iconSwitcher(weather.weather[0].main)}</InfoItem>\r\n      </Grid>\r\n      <Grid xs={24} style={{ paddingBottom: 0, paddingTop: 0 }}>\r\n        <InfoItem>\r\n          <Text h1>{Math.round(weather.main.temp)}°C</Text>\r\n        </InfoItem>\r\n      </Grid>\r\n      <Grid xs={24} style={{ paddingTop: 0, margin: -10 }}>\r\n        <MinMax isSM={isSM} weather={weather} />\r\n      </Grid>\r\n      <Grid xs={24}>\r\n        <AdditionalRow isSM={isSM} weather={weather} />\r\n      </Grid>\r\n    </Grid.Container>\r\n  );\r\n};\r\n\r\nexport default Info;\r\n","import { Card, Text } from '@geist-ui/react';\r\nimport React from 'react';\r\nimport Info from '../Info/Info';\r\n\r\nconst WeatherInfo = ({ weather }) => {\r\n  return (\r\n    <Card shadow>\r\n      {typeof weather.main != 'undefined' ? (\r\n        <Info weather={weather} />\r\n      ) : (\r\n        <>\r\n          <Text h3>Nothing found 😌</Text>\r\n          <Text p>(that's not a problem, just try to find again)</Text>\r\n        </>\r\n      )}\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default WeatherInfo;\r\n","import { Col, Row, Spacer, useMediaQuery, useToasts } from '@geist-ui/react';\r\nimport React, { useEffect, useState } from 'react';\r\nimport API from '../../config';\r\nimport { checkCookie, setCookie } from '../../features/cookies';\r\nimport SearchBar from '../SearchBar/SearchBar';\r\nimport WeatherInfo from '../WeatherInfo/WeatherInfo';\r\n\r\nconst Content = () => {\r\n  const [weather, setWeather] = useState({});\r\n  const isSM = useMediaQuery('sm', { match: 'down' });\r\n  const [, setToast] = useToasts();\r\n\r\n  useEffect(() => {\r\n    const agreement = checkCookie('agreement');\r\n    if (!agreement) {\r\n      setToast({\r\n        text: 'This site uses cookie, do you agree to them?',\r\n        type: 'warning',\r\n        delay: 50000,\r\n        actions: [\r\n          {\r\n            name: 'Agree',\r\n            handler: (event, cancel) => {\r\n              setCookie('agreement', true);\r\n              cancel();\r\n            },\r\n          },\r\n        ],\r\n      });\r\n    }\r\n    const cookie = checkCookie();\r\n    if (cookie) {\r\n      setWeather(JSON.parse(cookie));\r\n    } else {\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          fetch(\r\n            `${API.base}weather?lat=${position.coords.latitude}&lon=${position.coords.longitude}&units=metric&appid=${API.key}`,\r\n          )\r\n            .then((res) => res.json())\r\n            .then((r) => {\r\n              setWeather(r);\r\n              setCookie('local_weather', r);\r\n            });\r\n        },\r\n        (errorObj) => {\r\n          setToast({\r\n            text: errorObj.message,\r\n            type: 'error',\r\n            delay: 3000,\r\n          });\r\n        },\r\n        { enableHighAccuracy: true, maximumAge: 10000 },\r\n      );\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Row>\r\n        {!isSM && <Col span={4} />}\r\n        <Col>\r\n          <SearchBar setWeather={setWeather} />\r\n        </Col>\r\n        {!isSM && <Col span={4} />}\r\n      </Row>\r\n      <Spacer y={1} />\r\n      <Row>\r\n        {!isSM && <Col span={4} />}\r\n        <Col>\r\n          <WeatherInfo weather={weather} />\r\n        </Col>\r\n        {!isSM && <Col span={4} />}\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Content;\r\n","import { Button, Page, Text, useMediaQuery } from '@geist-ui/react';\r\nimport { Activity, Moon, Sun } from '@geist-ui/react-icons';\r\nimport React from 'react';\r\nimport Bar from '../Bar/Bar';\r\nimport Content from '../Content/Content';\r\n\r\nconst PageLayout = ({ switchThemes, themeType }) => {\r\n  const isXS = useMediaQuery('xs', { match: 'down' });\r\n  return (\r\n    <Page>\r\n      <Page.Header>\r\n        <Bar\r\n          left={\r\n            <Text h4 style={{ margin: 0 }}>\r\n              Karrtopelka\r\n            </Text>\r\n          }\r\n          right={\r\n            <Button\r\n              type={themeType === 'light' ? 'success' : 'warning'}\r\n              ghost\r\n              iconRight={themeType === 'light' ? <Moon /> : <Sun />}\r\n              auto\r\n              size=\"small\"\r\n              onClick={switchThemes}\r\n            />\r\n          }\r\n          switchThemes={switchThemes}\r\n          themeType={themeType}\r\n        />\r\n      </Page.Header>\r\n      <Page.Content>\r\n        <Content />\r\n      </Page.Content>\r\n      {!isXS && (\r\n        <Page.Footer>\r\n          <Bar\r\n            left={\r\n              <Text p style={{ margin: 0 }}>\r\n                {new Date().getFullYear()}\r\n              </Text>\r\n            }\r\n            right={\r\n              <Text p style={{ margin: 0 }}>\r\n                Ralabs{' '}\r\n                <span>\r\n                  <Activity size={16} />\r\n                </span>{' '}\r\n                Karrtopelka\r\n              </Text>\r\n            }\r\n          />\r\n        </Page.Footer>\r\n      )}\r\n    </Page>\r\n  );\r\n};\r\n\r\nexport default PageLayout;\r\n","import { CssBaseline, GeistProvider } from '@geist-ui/react';\nimport { useState } from 'react';\nimport PageLayout from './components/PageLayout/PageLayout';\n\nconst App = () => {\n  const [themeType, setThemeType] = useState('light');\n\n  const switchThemes = () => {\n    setThemeType((last) => (last === 'dark' ? 'light' : 'dark'));\n  };\n\n  return (\n    <div>\n      <GeistProvider themeType={themeType}>\n        <CssBaseline />\n        <PageLayout switchThemes={switchThemes} themeType={themeType} />\n      </GeistProvider>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}